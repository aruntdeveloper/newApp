<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
    <script type="text/javascript" src="https://static.facilio.com/apps-sdk/latest/facilio_apps_sdk.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
</head>
<style>
</style>
<body>
<div id="app">
    <div id="chart-container" style="position:relative;width:80vw; height:80vh; margin:auto;margin-top:10vh;">
    <canvas id="Chart"></canvas>
    </div>
</div>
</body>
<script type="text/javascript">
     var app = new Vue({
        el:"#app",
        data(){
            return {
                response:null,
                option:{
                    method:"put",
                    data:{
                        reportId:5992
                    },
                },
                optionNew:{
                    method:"put",
                    data:{
                        reportId:5992
                    }
                }
            }
        },

        mounted(){
            console.log('inside vvue')

            function average(res){

                //finding the count of days or date or hour between the given range       
                var start,filter,operatorId,startDate,endDate;

                start=res.data.report.dateRange.startTime;
                end=res.data.report.dateRange.endTime;
                filter=res.data.report.xAggrEnum;
                operatorId=res.data.report.dateOperator;
                startDate=new Date(start);
                endDate=new Date(end);
                
                var daysCount=[];
                for(let i=0;i<=6;i++){
                    daysCount[i]=0;
                }

                var datesCount=[];
                for (let i=1;i<=31;i++){
                    datesCount[i]=0;
                }

                var hoursCount=[];
                if (filter=="WEEKDAY"||filter=="DAYSOFMONTH"){

                    while(startDate<=endDate){
                        if(filter=="WEEKDAY"){
                            daysCount[startDate.getDay()]+=1;
                        }
                        else if(filter=="DAYSOFMONTH"){
                            datesCount[startDate.getDate()]+=1;
                        }
                        startDate.setDate(startDate.getDate()+1);   
                    }
                }
                else if(filter=="HOURSOFDAY"){

                    if(operatorId==46|| operatorId==47 || operatorId==48){

                         var lastFullDay=new Date(endDate);
                         lastFullDay.setDate(endDate.getDate()-1);
                         var millisec=lastFullDay.getTime()-startDate.getTime();
                         var noOfHours=Math.ceil(millisechoursCount/(24*60*60*1000));

                         for(let i=0;i<=23;i++){
                            hoursCount[i]=noOfHours;
                        }
                        for(let i=0;i<=endDate.getHours();i++){
                            hoursCount[i]+=1;
                        }
                    }
                    else{
                        var millisec=endDate.getTime()-startDate.getTime();
                        var noOfHours=Math.ceil(millisec/(24*60*60*1000));
                        for(let i=0;i<=23;i++){
                            hoursCount[i]=noOfHours;
                        }
                    }
                }

                //finding the average value
                //const days=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
                var data=res.data.reportData.data;
                function roundoff(num){
                    if(!Number.isInteger(num)){
                        return num.toFixed(2);
                    }
                    else{
                        return num
                    }
                }

                if (filter=="WEEKDAY"){
                    var avgWeekDays=[];
                    var weekDaysLabel=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
                    for(let i=0;i<data.length;i++){
                        tempDate=new Date(data[i].X);
                        avgWeekDays[tempDate.getDay()]=roundoff(data[i].Id/daysCount[tempDate.getDay()]);
                        //weekDaysLabel[tempDate.getDay()]=days[tempDate.getDay()];
                    }
                    let firstWeekDay=avgWeekDays.shift();
                    avgWeekDays.push(firstWeekDay);

                     return [avgWeekDays,weekDaysLabel];

                    }
                else if(filter=="DAYSOFMONTH"){
                    var avgDaysOfMonth=[];
                    var daysOfMonthLabel=[01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];
                    for(let i=0;i<data.length;i++){
                        tempDate=new Date(data[i].X);
                        avgDaysOfMonth[tempDate.getDate()]=roundoff(data[i].Id/datesCount[tempDate.getDate()]);
                        //daysOfMonthLabel[i]=tempDate.getDate();
                     }
                    return [avgDaysOfMonth,daysOfMonthLabel];
                }
                else if(filter=="HOURSOFDAY"){
                    var avgHoursOfDay=[];
                    var hoursOfDayLabel=["00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23"];
                    for(let i=0;i<data.length;i++){
                        tempDate=new Date(data[i].X);
                        avgHoursOfDay[tempDate.getHours()]=roundoff(data[i].Id/hoursCount[Math.round(tempDate.getHours())]);
                        //hoursOfDayLabel[i]=tempDate.getHours();
                     }
                    return [avgHoursOfDay,hoursOfDayLabel];
                }
            }
            const config = {
                            data: {
                                labels:null,
                                datasets:[{
                                    data: null,
                                    backgroundColor: '#86acb0',
                                    hoverBackgroundColor:'#a4c1c4'
                                }]
                            },
                            type:'bar',
                            plugins: [ChartDataLabels],
                            options:{
                                maintainAspectRatio: false,
                               
                                plugins: {
                                    tooltip:{
                                        displayColors:false,
                                        callbacks:{ 
                                            title:function(data){
                                            },
                                            label:function(context){
                                                return "Created Time: "+context.label
                                            },
                                            afterLabel:function(context){
                                                return "Average Of Workorders: "+context.raw
                                            },
                                            labelColor:function(context){
                                                return "red"
                                            },
                                            labelTextColor:function(context){
                                                return "yellow"
                                            }
                                          
                                        
                                        },
                                        backgroundColor:"white",
                                        bodyColor:"#979797",
                                        titleColor:"#979797",
                                        borderColor:"#979797",
                                        borderWidth:"1",
                                        caretSize:0,
                                        padding:10
                                    },
                                    datalabels:{
                                    anchor:"end",
                                    align:"top",
                                    color:'#86acb0'
                                    },
                                    legend: {
                                       display: false, 
                                       labels:{
                                        display:true
                                       }                                         
                                            }
                                        },
                                scales:{
                                    x:{
                                        grid:{
                                            display:false
                                        },
                                        ticks:{
                                            color:'black'
                                        }
                                    },
                                    y:{
                                       grid:{
                                        borderDash:[2,3],
                                        borderColor:"white"
                                       },
                                       ticks:{
                                        count:5,
                                        color:"black"
                                       }
                                    }
                                }
                            }
                        }

            window.facilioApp= FacilioAppSDK.init();
            
            window.facilioApp.on("app.loaded",function(){
                console.log("Welcome");
            }) 
            // window.facilioApp.on('db.filters.changed', (data) => {
            //     debugger;
            //         console.log('dashboard filter changed. ')
            //         this.optionNew.data.startTime=data.dashboardFilter.timelineFilter.startTime;
            //         this.optionNew.data.endTime=data.dashboardFilter.timelineFilter.endTime;
            //         window.facilioApp.request.invokeFacilioAPI('/v3/report/execute',this.optionNew).then((res) =>{
            //         this.response=average(res);
            //         console.log(res);
            //         console.log(this.response[0]);
            //         console.log(this.response[1]);
            //         myChart.data.datasets[0].data=this.response[0];
            //         myChart.data.labels=this.response[1];
            //         // const myChart = new Chart(
            //         //         document.getElementById('myChart'),
            //         //         config
            //         //     ); 
                    
            //         })
            //     })
            window.facilioApp.request.invokeFacilioAPI('/v3/report/execute',this.option).then((res) =>{
                this.response=average(res);
                console.log(res);
                config.data.labels=this.response[1];
                config.data.datasets[0].data=this.response[0];
                const myChart = new Chart(
                            document.getElementById('Chart'),
                            config
                        );  
                //myChart.register(ChartDataLabels);
                window.facilioApp.on('db.filters.changed', (data) => {
                    console.log('dashboard filter changed. ')
                    this.optionNew.data.startTime=data.dashboardFilter.timelineFilter.startTime;
                    this.optionNew.data.endTime=data.dashboardFilter.timelineFilter.endTime;
                    window.facilioApp.request.invokeFacilioAPI('/v3/report/execute',this.optionNew).then((res) =>{
                    this.response=average(res);
                    console.log(res);
                    console.log(this.response[0]);
                    console.log(this.response[1]);
                    myChart.data.datasets[0].data=this.response[0];
                    myChart.data.labels=this.response[1];
                    myChart.update();
                    })
                })    
            })
     }
    })
</script>
</html>
